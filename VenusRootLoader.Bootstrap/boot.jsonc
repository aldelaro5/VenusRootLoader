// DO NOT EDIT THIS FILE UNLESS YOU ARE AWARE OF WHAT YOU ARE DOING!!!

// It allows to configure the known settings of the "boot.config" file by modifying its data.
// All fields here correspond to a key that is known to exist in some ways.
// Most of these either doesn't do anything or is unused, but some of them
// have an influence on the game's execution and some of them can make a game
// unbootable if they aren't setup correctly. VenusRootLoader allows to modify
// them for the sake of experimentation if it ends up being handy in the future,
// but they are no known useful case for modifying them yet.
// The defaults in this file replicate the defaults of the game.

// The boot.config file is in a simple "key=value" format, one per line.
// The keys are not officially documented because they are meant to be internal values only
// Unity knows about for internal usage. Since VenusRootLoader can assume the Unity version,
// it's possible to assume the keys that are known to exist for this version which is what this file
// allows you to do.

// A value of null means the key will not be present in the modified boot.config data
{
  "BootConfigSettings": {
    // Set to true to not have GPU rendering, only useful for testing purposes. It does the same
    // thing than the "-batchmode" command line argument when sent to the player
    // Default: null (assumed to be true for any non-null value)
    "Headless": null,
    // Enforces that only a single instance of the game is running which is done by focussing on the
    // existing on and exiting if an instance of the game is already running. It does the same thing
    // than the "-single-instance" command line argument when sent to the player
    // Default: null (assumed to be true for any non-null value)
    "SingleInstance": null,
    // Forces the GfxThreadingMode to "Direct" which Unity documentation describes as:
    // "Main thread writes native graphics commands and submits them directly."
    // This setting takes precedence over all other gfx keys.
    // Default: null (bool)
    "ForceGfxDirect": null,
    // Forces the GfxThreadingMode to "NonThreaded" which Unity documentation describes as:
    // "Main thread writes Unity graphics commands that it later reads and converts to native graphics commands."
    // This setting only applies if ForceGfxDirect is false or null
    // Default: null (bool)
    "ForceGfxSt": null,
    // Forces the GfxThreadingMode to "Threaded" which Unity documentation describes as:
    // "Main thread writes Unity graphics commands. A Render thread reads Unity graphics commands and converts them to
    // native graphics commands."
    // This setting only applies if ForceGfxDirect and ForceGfxSt are false or null
    // Default: null (bool)
    "ForceGfxMt": null,
    // This setting sets the GfxThreadingMode depending on the value:
    // - "native": ClientWorkerNativeJobs: This ends up doing the same as ClientWorkerJobs.
    // - "legacy": ClientWorkerJobs which Unity documentation describes as:
    //             "Main thread writes Unity graphics commands and starts worker threads to do the same. A Render thread
    //             reads Unity graphics commands and converts them to native graphics commands."
    // - "off": Threaded which Unity documentation describes as:
    //          "Main thread writes Unity graphics commands. A Render thread reads Unity graphics commands and converts them to
    //          native graphics commands."
    // Any other value causes the GfxThreadingMode to entirely depend on the value of GfxEnableNativeGfxJobs.
    // This setting only applies if ForceGfxDirect, ForceGfxSt and ForceGfxMt are false or null
    // Default: null (string)
    "ForceGfxJobs": null,
    // A value of true will set the GfxThreadingMode to "ClientWorkerJobs" or "ClientWorkerNativeJobs" depending
    // on the value of "GfxEnableNativeGfxJobs".
    // A value of false or null will set the GfxThreadingMode to "Threaded" unless there is only one CPU thread available
    // where it will be set to "Direct" instead.
    // This setting only applies if none of the GfxForce settings applied.
    // Default: null (bool)
    "GfxEnableGfxJobs": null,
    // This setting, while technically used, doesn't do anything in practice. While it would have normally set the
    // GfxThreadingMode to "ClientWorkerJobs" or "ClientWorkerNativeJobs", this Unity version treats these 2 values
    // the exact same way where "ClientWorkerJobs" is what's used for either of these values. Unity documentation describes
    // "ClientWorkerJobs" as:
    // "Main thread writes Unity graphics commands and starts worker threads to do the same. A Render thread
    // reads Unity graphics commands and converts them to native graphics commands."
    // The game ships with this key set to nothing which is the same as null. To reflect this, VenusRootLoader will always
    // place this key in the modified data, but a value of null will mean there will be no value on the right of the "=" sign.
    // Default: null (bool)
    "GfxEnableNativeGfxJobs": null,
    // This key has no known usage, but it can be parsed by Unity.
    // Default: null (bool)
    "GfxDisableMtRendering": null,
    // A Unity experimental rendering setting that seems to determine the moment that the render thread is synchronised.
    // Only these values are possible (any other value will cause the value to fal back to "end-of-frame"):
    // - "end-of-frame"
    // - "after-script-update"
    // - "after-script-late-update"
    // - "wait-for-present"
    // Default: null (string)
    "GfxJobsSync": null,
    // If this is true, Unity will pop a blocking MessageBox with a message that allows to attach a native debugger.
    // This happens very early, before mono_jit_init_version is called and is therefore of limited usefulness since one
    // could simply launch Unity with a native debugger to start debugging even earlier.
    // Setting the "UNITY_GIVE_CHANCE_TO_ATTACH_DEBUGGER" environment variable to a non-zero value has the same effect.
    // The game ships with this key set.
    // Default: false (bool)
    "WaitForNativeDebugger": false,
    // If this is true, Unity will pop a blocking MessageBox with a message that allows to attach a native debugger.
    // On a dev build, the discovery of a player connection still happens periodically, but not on a release build.
    // This happens later than Mono initialisation just before the game is ready which renders this setting very useless
    // compared to configuring VenusRootLoader to suspend Mono to let you connect to the debug server. The Mono suspend
    // feature takes effect at the earliest possible moment (during Mono initialisation) and it doesn't involve a MessageBox.
    // It is therefore recommended to not use this setting and to instead set MonoDebuggerSettings.SuspendOnBoot to true
    // in VenusRootLoader's config.jsonc file.
    // Setting the "UNITY_GIVE_CHANCE_TO_ATTACH_DEBUGGER" environment variable to a non-zero value has the same effect.
    // Default: null (true)
    "WaitForManagedDebugger": null,
    // Determines the version of the Mono runtime the game will attempt to boot on. There are only 2 possible values:
    // "latest" (net471 Mono) or "legacy" (net35 Mono). If no value is present, it defaults to "legacy".
    // This should ALWAYS be set to "latest" because booting on "legacy" not only requires to manually
    // install the older Mono from a Unity 2018.4.12f1 installation, it also impacts modding very negatively.
    // VenusRootLoader always assumes the Mono runtime of the game supports net471 which wouldn't work on a net35 Mono.
    // Default: "latest" (string)
    "ScriptingRuntimeVersion": "latest",
    // No use for this key was found, but for some reason, the game ships with it
    // Default: false (bool)
    "VrEnabled": false,
    // No use for this key was found, but for some reason, the game ships with it
    // Default: false (bool)
    "HdrDisplayEnabled": false,
    // The only valid value is "il2cpp", but setting this key to this value will cause a crash upon boot
    // Default: null (string)
    "MonoCodeGen": null,
    // Seems to control the amount of jobless look a job queue needs to have in a row before having the thread idle.
    // A value of null will default the number to 10.
    // Default: null (int)
    "MaxNumLoopsNoJobBeforeGoingIdle": null,
    // The dwStackSize value of the CreateThread call used for the PreloadManager thread ???
    // Default: null (int)
    "PreloadManagerThreadStackSize": null,
    // Enables the http file system module which seems to be a way for the player to perform I/O
    // over an HTTP server that the editor hosts.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (false)
    "HttpFilesystemEnable": null,
    // This determines part of the HTTP URL used if HttpFilesystemEnable is true. The full URL is:
    // "https://[PlayerConnectionIp]:38443/unity/player/files/[HttpFilesystemPrefix]/Data"
    // Anything in square brackets are placeholders that do not include the brackets.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (string)
    "HttpFilesystemPrefix": null,
    // If HttpFilesystemEnable is true, seems to be some sort of API key for it.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (string)
    "HttpFilesystemApiKey": null,
    // If HttpFilesystemEnable is true, seems to be some sort of public key for it.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (string)
    "HttpFilesystemPubKey": null,
    // The IP address used when in "connect" mode to connect to an editor.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (string)
    "PlayerConnectionIp": null,
    // This determines the value of the [Debug] field sent in the UDP message during player connections discovery which tells clients
    // whether a debugger can be attached to this player.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (bool)
    "PlayerConnectionDebug": null,
    // Only 2 values is possible:
    // - listen: Listens for a player connection (this is the default if the value is null)
    // - connect: Connect to an editor
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (string)
    "PlayerConnectionMode": null,
    // This determines the [EditorId] field sent in the UDP message during player connections discovery.
    // This value is a way for the editor to identify a version of a player build of the game.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (int)
    "PlayerConnectionGuid": null,
    // The IP address used when in "listen" mode to listen for player connections.
    // A value of null defaults the IP to 0.0.0.0 which listens to every IP.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (string)
    "PlayerConnectionListenAddress": null,
    // The amount of seconds before timing on in "connect" mode when attempting to connect to the editor
    // A value of null or -1 will default to 5 seconds.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (int)
    "PlayerConnectionWaitTimeout": null,
    // Determines whether the profiler will be enabled on boot.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (bool)
    "ProfilerEnableOnStartup": null,
    // Seems to determine the maximum amount of bytes the profiler can allocate.
    // A value of null will default to 0x400000.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (int)
    "ProfilerMaxPoolMemory": null,
    // Seems to determine the maximum amount of bytes the profiler can use.
    // A value of null will default to 0x1000000.
    // This key is only used in a dev build of UnityPlayer.dll.
    // Default: null (int)
    "ProfilerMaxUsedMemory": null
  }
}